@import "settings";


// ADD YOUR OWN MIXINS AND HELPERS HERE
// DESCRIBE WHAT EACH DOES AND HOW TO USE THEM


// List styles
// -------------------------------------------------------

// Mixins for list style types

@mixin unordered {
	 list-style-position: outside;
	 list-style-type: disc;
}

@mixin unordered-inside {
	 list-style-position: inside;
	 list-style-type: disc;
}

@mixin ordered {
	list-style-position: outside;
	list-style-type: decimal;
}

@mixin ordered-inside {
	list-style-position: inside;
	list-style-type: decimal;
}

@mixin nobullet {
	list-style-type: none;
}


// Micro clearfix provides an easy way to contain floats without adding additional markup
// http://nicolasgallagher.com/micro-clearfix-hack/
// E.g
// div { @include clearfix; }
// -------------------------------------------------------

@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}


// Font-face
// A simple @font-face mixin allowing easier custom fonts integration, like so:
// The mixin also takes an optional $asset-pipeline: true argument for use with the Rails asset pipeline.
//
// E.g:
//  @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Regular');
//  @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Bold', bold);
//  @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Italic', normal, italic);
//
// Rails asset-pipeline - place fonts in app/assets/fonts/
//  @include font-face(SourceSansPro, 'Source_Sans_Pro/SourceSansPro-Regular', normal, $asset-pipeline: true);
// -------------------------------------------------------

// Order of the includes matters, and it is: normal, bold, italic, bold+italic.

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    @if $asset-pipeline == true {
      src: font-url('#{$file-path}.eot');
      src: font-url('#{$file-path}.eot?#iefix')          format('embedded-opentype'),
           font-url('#{$file-path}.woff')                format('woff'),
           font-url('#{$file-path}.ttf')                 format('truetype'),
           font-url('#{$file-path}.svg##{$font-family}') format('svg');
    } @else {
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
           url('#{$file-path}.woff')                     format('woff'),
           url('#{$file-path}.ttf')                      format('truetype'),
           url('#{$file-path}.svg##{$font-family}')      format('svg');
    }
  }
}


// Advanced typography settings
// -------------------------------------------------------

// Get advanced with type if needed for ligatures etc...

@mixin advancedtype {
	//font-variant-ligatures: contextual;            // Set the default for ligatures
	//-moz-font-feature-settings: "liga=1,dlig=1";   // Ligature settings for mozilla
	font-kerning: normal; 								           // Set the default for kerning
	//-webkit-font-smoothing: antialiased;           // Improve (or in some cases royally screw with) safari's legibility somewhat
	//font-synthesis: none;                          // Don't allow the font to create sythetic bold/italic
	//text-rendering: optimizeLegibility;            // Improve kerning pairs. Webkit gets funny with this sometimes
}


// Retina images.
// Use with care - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// -------------------------------------------------------

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// Transitions
// -------------------------------------------------------

// Set-up custom transitions

@mixin color_transition {
	@include transition-property(color);
	@include transition-duration(0.3s);
	@include transition-timing-function(ease-in-out);
}

// HEX to RGB
// http://codepen.io/sturobson/pen/hdKyv
// -------------------------------------------------------

@mixin rgba($color, $value) {
	background-color: $color;
	background-color: rgba($color, $value);
}


// Creates a visual triangle.
// Mixin takes ($size, $color, $direction)
// E.g @include triangle(12px, gray, down);
// -------------------------------------------------------

@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;

    } @else if $direction == right {
      border-left-color:   $color;

    } @else if $direction == down {
      border-top-color:    $color;

    } @else if $direction == left {
      border-right-color:  $color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;

    @if $direction == up-right {
      border-left:  $size solid transparent;

    } @else if $direction == up-left {
      border-right: $size solid transparent;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;

    @if $direction == down-right {
      border-left:  $size solid transparent;

    } @else if $direction == down-left {
      border-right: $size solid transparent;
    }
  }
}
